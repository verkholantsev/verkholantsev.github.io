extends ../templates/post.jade

block post
    :markdown
        #Тестирование кода в разных версиях Node.js

        ##Задача

        Тестировать код в нескольких версиях `Node.js`.

        ##Как менять версию Node.js?

        Менять версию `Node.js` можно с помощью `nvm`, этот способ подходит, когда необходимо разово переключиться с одной версии на другую. Подход, реализуемый `nvm`, плох тем, что меняет состояние системы, в которой происходит разработка. Работать с неизменяемым состояние всегда проще, чем с изменяемым.

        Создание неизменяемых сред исполнения кода легко реализуется с помощью `Docker`. Он умеет создавать `lxc`-контейнеры с изолированными от хост-машины ресурсами. В контексте нашей задачи это означает, что мы можем очень быстро поднимать окружения с нужной нам версией `Node.js` и запускать в них свои тесты.

        ##Напишем тесты

        Для примера напишем тесты, зависящие от версии `Node.js`.

        ```javascript
        var expect = require('chai').expect;

        describe('Version of Node.js', function () {
            var version;

            beforeEach(function () {
                version = process.versions.node;
            });

            describe('should be equal', function () {
                it('0.11.14', function () {
                    expect(version).to.be.eql('0.11.14');
                });
            });
        });
        ```

        ##Образы

        Докерные контейнеры запускаются из заранее собранных образов. Образ можно собрать самому, либо скачать из репозитория. Для нашей задачи подойдут образы, содержащие `Node.js` нужных нам версий из официального репозитория [registry.hub.docker.com](https://registry.hub.docker.com/).

        Выкачиваем два образа.

        ```shell
        docker pull node:0.11.14
        docker pull node:0.10.32
        ```

        ##Запуск контейнеров

        Для того, чтобы запустить наши тесты внутри контейнера, нам необходимо:

        1. Запустить контейнер из нужного образа;
        2. Смонтировать директорию с тестами на хост-машине в контейнер;
        3. Запустить тесты;
        4. Получить код завершения тестов;
        5. Удалить контейнер по завершению.

        Под OS X `Docker` запускается в виртуальной машине, управление которой осуществляется через утилиту `boot2docker`. В таком случае для того, чтобы демон смог смонтировать директорию хост-машины в контейнер, нужно сначала смонтировать ее в виртуалку. В версиях &lt; 1.2.0 это можно сделать, например, с помощью `sshfs`. В `boot2docker` &ge; 1.3.0 директория `/Users` сразу монитируется в виртуальную машину.

        Запускаем тесты внутри контейнера.

        ```shell
        docker run \
            --rm \
            -v /Users/alex/docker-node-tests:/opt/tests \
            node:0.11.14 \
            /opt/tests/node_modules/.bin/mocha /opt/tests/spec


          Version of Node.js
            should be equal
              ✓ 0.11.14


          1 passing (17ms)

        docker run \
            --rm \
            -v /Users/alex/docker-node-tests:/opt/tests \
            node:0.10.32 \
            /opt/tests/node_modules/.bin/mocha /opt/tests/spec


          Version of Node.js
            should be equal
              1) 0.11.14


          0 passing (13ms)
          1 failing

          1) Version of Node.js should be equal 0.11.14:

              AssertionError: expected '0.10.32' to deeply equal '0.11.14'
              + expected - actual

              +"0.11.14"
              -"0.10.32"

        ```

        Директива `--rm` заставляет `Docker` удалить контейнер после завершения команды, с которой он был запущен. Директива `-v /Users/alex/docker-node-tests:/opt/tests` позволяет смонтировать директорию хост-машины `/Users/alex/docker-node-tests` в директорию контейнера `/opt/tests`. Затем следует название и версия образа `node:0.11.14` и команда, которую следует выполнить в контейнере `/opt/tests/node_modules/.bin/mocha /opt/tests/spec`.

        Упростить запуск тестов можно с помощью такого скрипта:

        ```shell
        #!/usr/bin/env bash

        for var in \$@
        do
            echo Testing in \$var
            docker run \
                --rm \
                -v /Users/alex/docker-node-tests:/opt/tests \
                node:\$var \
                /opt/tests/node_modules/.bin/mocha /opt/tests/spec
        done
        ```

        Теперь тесты можно запускать, просто перечисляя необходимые версии `Node.js`.

        ```shell
        ./test.sh 0.10.32 0.11.14
        ```

        ##Итого

        С помощью `Docker` можно быстро поднимать нужные окружения и запускать в них тесты.
